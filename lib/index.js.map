{"version":3,"sources":["../src/index.js"],"names":["dependencies","path","require","chalk","slugify","BbPromise","Runtimes","ZipService","LayersService","BucketService","LocalFolders","Dependencies","CloudFormationService","checkRequirements","DeployCommand","init","console","log","module","exports","$sls","injections","service","defaultOpts","functions","dependencyInstall","compileDir","customInstallationCommand","layersDeploymentBucket","provider","deploymentBucket","hooks","bind","then"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAEC,OAAO,CAAC,MAAD,CADM;AAEnBC,EAAAA,KAAK,EAAED,OAAO,CAAC,OAAD,CAFK;AAGnBE,EAAAA,OAAO,EAAEF,OAAO,CAAC,SAAD,CAHG;AAInBG,EAAAA,SAAS,EAAEH,OAAO,CAAC,UAAD,CAJC;AAKnBI,EAAAA,QAAQ,EAAEJ,OAAO,CAAC,YAAD,CALE;AAMnBK,EAAAA,UAAU,EAAEL,OAAO,CAAC,sBAAD,CANA;AAOnBM,EAAAA,aAAa,EAAEN,OAAO,CAAC,qBAAD,CAPH;AAQnBO,EAAAA,aAAa,EAAEP,OAAO,CAAC,qBAAD,CARH;AASnBQ,EAAAA,YAAY,EAAER,OAAO,CAAC,wBAAD,CATF;AAUnBS,EAAAA,YAAY,EAAET,OAAO,CAAC,wBAAD,CAVF;AAWnBU,EAAAA,qBAAqB,EAAEV,OAAO,CAAC,6BAAD,CAXX;AAYnBW,EAAAA,iBAAiB,EAAEX,OAAO,CAAC,uBAAD,CAZP;AAanBY,EAAAA,aAAa,EAAEZ,OAAO,CAAC,mBAAD;AAbH,CAArB;;SAgBea,I;;;;;wFAAf;AAAA;AAAA;AAAA;AAAA;AACEC,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIAC,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAOC,UAAP,EAAsB;AAAA,MAC7BC,OAD6B,GACjBF,IADiB,CAC7BE,OAD6B,EAGrC;;AACAT,EAAAA,iBAAiB,CAACO,IAAD,CAAjB;;AAJqC,gDAW5BpB,YAX4B,MAWXqB,UAXW;AAAA,MAOnCpB,IAPmC,yBAOnCA,IAPmC;AAAA,MAQnCI,SARmC,yBAQnCA,SARmC;AAAA,MASnCS,aATmC,yBASnCA,aATmC;AAAA,MAUnCD,iBAVmC,yBAUnCA,iBAVmC;AAarC;;;;;AAGA,MAAMU,WAAW,GAAG;AAClBtB,IAAAA,IAAI,EAAE,GADY;AAElBuB,IAAAA,SAAS,EAAE,IAFO;AAGlBC,IAAAA,iBAAiB,EAAE,IAHD;AAIlBC,IAAAA,UAAU,EAAE,aAJM;AAKlBC,IAAAA,yBAAyB,EAAE,IALT;AAMlBC,IAAAA,sBAAsB,EAAEN,OAAO,CAACO,QAAR,CAAiBC;AANvB,GAApB,CAhBqC,CAyBrC;;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACL;;;AAGA,yCAAmC;AAAA,eACjC1B,SAAS,CAAC2B,IAAV,CAAe,KAAf,EAAqBC,IAArB,CAA0B;AAAA,iBAAMnB,aAAa,CAACM,IAAD,EAAO;AAAEG,YAAAA,WAAW,EAAXA;AAAF,WAAP,CAAnB;AAAA,SAA1B,CADiC;AAAA,OAJ9B;AAML,mCAA6B;AAAA,eAC3BlB,SAAS,CAAC2B,IAAV,CAAe,KAAf,EAAqBC,IAArB,CAA0B;AAAA,iBAAMnB,aAAa,CAACM,IAAD,EAAO;AAAEG,YAAAA,WAAW,EAAXA;AAAF,WAAP,CAAnB;AAAA,SAA1B,CAD2B;AAAA;AANxB;AADF,GAAP;AAWD,CAtCD,C,CAysourcesContent":["const dependencies = {\n  path: require('path'),\n  chalk: require('chalk'),\n  slugify: require('slugify'),\n  BbPromise: require('bluebird'),\n  Runtimes: require('./runtimes'),\n  ZipService: require('./package/ZipService'),\n  LayersService: require('./aws/LayersService'),\n  BucketService: require('./aws/BucketService'),\n  LocalFolders: require('./package/LocalFolders'),\n  Dependencies: require('./package/Dependencies'),\n  CloudFormationService: require('./aws/CloudFormationService'),\n  checkRequirements: require('./plugin/requirements'),\n  DeployCommand: require('./commands/Deploy')\n};\n\nasync function init() {\n  console.log('init func');\n}\n\nmodule.exports = ($sls, injections) => {\n  const { service } = $sls;\n\n  // pre validation\n  checkRequirements($sls);\n\n  const {\n    path,\n    BbPromise,\n    DeployCommand,\n    checkRequirements,\n  } = { ...dependencies, ...injections };\n\n  /**\n   * Default options\n   */\n  const defaultOpts = {\n    path: '.',\n    functions: null,\n    dependencyInstall: true,\n    compileDir: '.serverless',\n    customInstallationCommand: null,\n    layersDeploymentBucket: service.provider.deploymentBucket\n  };\n\n  // const inboundSettings = (service.custom || {})['serverless-layers'];\n\n  return {\n    hooks: {\n      /**\n       * @fires before:package:function:package\n       */\n      'before:package:function:package': () =>\n        BbPromise.bind(this).then(() => DeployCommand($sls, { defaultOpts })),\n      'before:package:initialize': () =>\n        BbPromise.bind(this).then(() => DeployCommand($sls, { defaultOpts })),\n    }\n  }\n};\n\n\n//\n// const BbPromise = require('bluebird');\n// const path = require('path');\n// const slugify = require('slugify');\n// const chalk = require('chalk');\n// const Runtimes = require('./runtimes');\n// const LayersService = require('./aws/LayersService');\n// const BucketService = require('./aws/BucketService');\n// const CloudFormationService = require('./aws/CloudFormationService');\n// const ZipService = require('./package/ZipService');\n// const LocalFolders = require('./package/LocalFolders');\n// const Dependencies = require('./package/Dependencies');\n//\n// class ServerlessLayers {\n//   constructor($sls, options) {\n//     this.cacheObject = {};\n//     this.options = options;\n//     this.$sls = $sls;\n//     this.initialized = false;\n//\n//     // hooks\n//     this.hooks = {\n//       'before:package:function:package': () => BbPromise.bind(this)\n//         .then(() => {\n//           return this.init()\n//             .then(() => this.deployLayers())\n//         }),\n//       'before:package:initialize': () => BbPromise.bind(this)\n//         .then(() => {\n//           return this.init()\n//             .then(() => this.deployLayers())\n//         }),\n//       'aws:info:displayLayers': () => BbPromise.bind(this)\n//         .then(() => this.init())\n//         .then(() => this.finalizeDeploy()),\n//       'after:deploy:function:deploy': () => BbPromise.bind(this)\n//         .then(() => this.init())\n//         .then(() => this.finalizeDeploy()),\n//       'plugin:uninstall:uninstall': () => BbPromise.bind(this)\n//         .then(() => {\n//           return this.init()\n//             .then(() => this.cleanUpAllLayers())\n//         }),\n//       'remove:remove': () => BbPromise.bind(this)\n//         .then(() => {\n//           return this.init()\n//             .then(() => this.cleanUpAllLayers())\n//         })\n//     };\n//   }\n//\n//   async init() {\n//     if (this.initialized) {\n//       return;\n//     }\n//\n//     this.provider = this.$sls.getProvider('aws');\n//     this.service = this.$sls.service;\n//     this.options.region = this.provider.getRegion();\n//\n//     // bindings\n//     this.log = this.log.bind(this);\n//     this.main = this.main.bind(this);\n//\n//     const version = this.$sls.getVersion().replace(/\\./g, '');\n//\n//     if (version < 1340) {\n//       this.log(`Error: Please install $sls >= 1.34.0 (current ${this.$sls.getVersion()})`)\n//       process.exit(1);\n//     }\n//   }\n//\n//   async deployLayers() {\n//     this.runtimes = new Runtimes(this);\n//     const settings = this.getSettings();\n//\n//     const cliOpts = this.provider.options;\n//\n//     for (const layerName in settings) {\n//       const currentSettings = settings[layerName];\n//       const enabledFuncs = currentSettings.functions;\n//\n//       // deploying a single function\n//       const deploySingle = !!(cliOpts.function && enabledFuncs);\n//\n//       // skip layers that is not related with specified function\n//       if (deploySingle && enabledFuncs.indexOf(cliOpts.function) === -1) {\n//         continue;\n//       }\n//\n//       this.logGroup(layerName);\n//       await this.initServices(layerName, currentSettings);\n//       await this.main();\n//     }\n//\n//     console.log('\\n');\n//   }\n//\n//   async cleanUpAllLayers() {\n//     this.runtimes = new Runtimes(this);\n//     const settings = this.getSettings();\n//     for (const layerName in settings) {\n//       const currentSettings = settings[layerName];\n//       this.logGroup(layerName);\n//\n//       if (currentSettings.arn) {\n//         this.warn(` (skipped) arn: ${currentSettings.arn}`);\n//         continue;\n//       }\n//\n//       await this.initServices(layerName, currentSettings);\n//       await this.cleanUpLayers();\n//     }\n//   }\n//\n//   async initServices(layerName, settings) {\n//     this.currentLayerName = layerName;\n//     this.settings = settings;\n//     this.zipService = new ZipService(this);\n//     this.dependencies = new Dependencies(this);\n//     this.localFolders = new LocalFolders(this);\n//     this.layersService = new LayersService(this);\n//     this.bucketService = new BucketService(this);\n//     this.cloudFormationService = new CloudFormationService(this);\n//     this.initialized = true;\n//   }\n//\n//   mergeCommonSettings(inboundSetting) {\n//     return {\n//       path: '.',\n//       functions: null,\n//       dependencyInstall: true,\n//       compileDir: '.$sls',\n//       customInstallationCommand: null,\n//       layersDeploymentBucket: this.service.provider.deploymentBucket,\n//       ...this.runtimes.getDefaultSettings(inboundSetting)\n//     };\n//   }\n//\n//   getSettings() {\n//     const inboundSettings = (this.$sls.service.custom || {})[\n//       '$sls-layers'\n//     ];\n//\n//     if (Array.isArray(inboundSettings)) {\n//       const settings = {};\n//       inboundSettings.forEach(inboundSetting => {\n//         const layerName = Object.keys(inboundSetting)[0];\n//         settings[layerName] = this.mergeCommonSettings(inboundSetting[layerName]);\n//       });\n//       return settings;\n//     }\n//\n//     return {\n//       default: this.mergeCommonSettings(inboundSettings)\n//     }\n//   }\n//\n//   hasSettingsChanged() {\n//     // don't check settings changes twice\n//     if (this.hasSettingsVerified) {\n//       return false;\n//     }\n//\n//     // by pass settings\n//     if (!this.settings.localDir) {\n//       return false;\n//     }\n//\n//     const manifest = '__meta__/manifest-settings.json';\n//     const currentSettings = JSON.stringify(this.settings);\n//\n//     // settings checked\n//     this.hasSettingsVerified = true;\n//\n//     return this.bucketService.getFile(manifest).then((remoteSettings) => {\n//\n//       // create and return true (changed)\n//       if (!remoteSettings) {\n//         return this.bucketService.putFile(manifest, currentSettings)\n//           .then(() => true);\n//       }\n//\n//       if (remoteSettings !== currentSettings) {\n//         return this.bucketService.putFile(manifest, currentSettings)\n//           .then(() => true);\n//       }\n//\n//       return false;\n//     });\n//   }\n//\n//   async main() {\n//     // static ARN\n//     if (this.settings.arn) {\n//       this.relateLayerWithFunctions(this.settings.arn);\n//       return;\n//     }\n//\n//     await this.runtimes.init();\n//     await this.dependencies.init();\n//     await this.localFolders.init();\n//\n//     // it avoids issues if user changes some configuration\n//     // which will not be applied till dependencies be changed\n//     let hasSettingsChanged = await this.hasSettingsChanged();\n//\n//     // check if directories content has changed\n//     // comparing hash md5 remote with local folder\n//     let hasFoldersChanged = false;\n//     if (this.settings.localDir) {\n//       hasFoldersChanged = await this.localFolders.hasFoldersChanged();\n//     }\n//\n//     // check if dependencies has changed comparing\n//     // remote package.json with local one\n//     let hasDepsChanged = false;\n//     if (this.settings.dependencyInstall) {\n//       hasDepsChanged = await this.runtimes.hasDependencesChanged();\n//     }\n//\n//     // check if something has changed\n//     let hasChanged = (!hasFoldersChanged && !hasDepsChanged && !hasSettingsChanged);\n//\n//     // merge package default options\n//     this.mergePackageOptions();\n//\n//     const currentLayerARN = await this.getLayerArn();\n//     if (hasChanged && currentLayerARN) {\n//      this.log(`${chalk.inverse.green(' No changes ')}! Using same layer arn: ${this.logArn(currentLayerARN)}`);\n//      this.relateLayerWithFunctions(currentLayerARN);\n//      return;\n//     }\n//\n//     // ENABLED by default\n//     if (this.settings.dependencyInstall) {\n//       await this.dependencies.install();\n//     }\n//\n//     if (this.settings.localDir) {\n//       await this.localFolders.copyFolders();\n//     }\n//\n//     await this.zipService.package();\n//     await this.bucketService.uploadZipFile();\n//     const version = await this.layersService.publishVersion();\n//     await this.bucketService.putFile(this.dependencies.getDepsPath());\n//\n//     this.relateLayerWithFunctions(version.LayerVersionArn);\n//   }\n//\n//   getLayerName() {\n//     const stackName = this.getStackName();\n//     const { runtimeDir } = this.settings;\n//     return slugify(`${stackName}-${runtimeDir}-${this.currentLayerName}`, {\n//       lower: true,\n//       replacement: '-'\n//     });\n//   }\n//\n//   getStackName() {\n//     return this.provider.naming.getStackName();\n//   }\n//\n//   getBucketName() {\n//     if (!this.settings.layersDeploymentBucket) {\n//       throw new Error(\n//         'Please, you should specify \"deploymentBucket\" or \"layersDeploymentBucket\" option for this plugin!\\n'\n//       );\n//     }\n//     return this.settings.layersDeploymentBucket;\n//   }\n//\n//   getPathZipFileName() {\n//     return `${path.join(process.cwd(), this.settings.compileDir, this.getLayerName())}.zip`;\n//   }\n//\n//   getBucketLayersPath() {\n//     const serviceStage = `${this.$sls.service.service}/${this.options.stage}`;\n//\n//     let deploymentPrefix = '$sls';\n//     if (this.provider.getDeploymentPrefix) {\n//       deploymentPrefix = this.provider.getDeploymentPrefix();\n//     }\n//\n//     return path.join(\n//       deploymentPrefix,\n//       serviceStage,\n//       'layers'\n//     ).replace(/\\\\/g, '/');\n//   }\n//\n//   async getLayerArn() {\n//     if (!this.cacheObject.layersArn) {\n//       this.cacheObject.layersArn = {};\n//     }\n//\n//     // returns cached arn\n//     if (this.cacheObject.layersArn[this.currentLayerName]) {\n//       return this.cacheObject.layersArn[this.currentLayerName];\n//     }\n//\n//     const outputs = await this.cloudFormationService.getOutputs();\n//\n//\n//     if (!outputs) return null;\n//\n//     const logicalId = this.getOutputLogicalId();\n//\n//     const arn = (outputs.find(x => x.OutputKey === logicalId) || {}).OutputValue;\n//\n//     // cache arn\n//     this.cacheObject.layersArn[this.currentLayerName] = arn;\n//\n//     return arn;\n//   }\n//\n//   getOutputLogicalId() {\n//     return this.provider.naming.getLambdaLayerOutputLogicalId(this.getLayerName());\n//   }\n//\n//   mergePackageOptions() {\n//     const { packageExclude } = this.settings;\n//     const pkg = this.service.package;\n//\n//     const opts = {\n//       individually: false,\n//       excludeDevDependencies: false,\n//       exclude: []\n//     };\n//\n//     this.service.package = {...opts, ...pkg};\n//\n//     for (const excludeFile of packageExclude) {\n//       const hasRule = (this.service.package.exclude || '').indexOf(excludeFile);\n//       if (hasRule === -1) {\n//         this.service.package.exclude.push(excludeFile);\n//       }\n//     }\n//   }\n//\n//   relateLayerWithFunctions(layerArn) {\n//     this.log('Adding layers...');\n//     const { functions } = this.service;\n//     const funcs = this.settings.functions;\n//     const cliOpts = this.provider.options;\n//\n//     Object.keys(functions).forEach(funcName => {\n//       if (cliOpts.function && cliOpts.function !== funcName) {\n//         return;\n//       }\n//\n//       let isEnabled = !funcs;\n//\n//       if (Array.isArray(funcs) && funcs.indexOf(funcName) !== -1) {\n//         isEnabled = true;\n//       }\n//\n//       if (isEnabled) {\n//         functions[funcName].layers = functions[funcName].layers || [];\n//         functions[funcName].layers.push(layerArn);\n//         functions[funcName].layers = Array.from(new Set(functions[funcName].layers));\n//         this.log(`function.${chalk.magenta.bold(funcName)} - ${this.logArn(layerArn)}`, ' ✓');\n//       } else {\n//         this.warn(`(Skipped) function.${chalk.magenta.bold(funcName)}`, ` x`);\n//       }\n//     });\n//\n//     this.service.resources = this.service.resources || {};\n//     this.service.resources.Outputs = this.service.resources.Outputs || {};\n//\n//     const outputName = this.getOutputLogicalId();\n//\n//     Object.assign(this.service.resources.Outputs, {\n//       [outputName]: {\n//         Value: layerArn,\n//         Export: {\n//           Name: outputName\n//         }\n//       }\n//     });\n//   }\n//\n//   getDependenciesList() {\n//     return Object.keys((this.localPackage.dependencies||[])).map(x => (\n//       `${x}@${this.localPackage.dependencies[x]}`\n//     ));\n//   }\n//\n//   async finalizeDeploy() {\n//     const cliOpts = this.provider.options;\n//     this.logGroup(\"Layers Info\");\n//     Object.keys(this.service.functions).forEach(funcName => {\n//       const lambdaFunc = this.service.functions[funcName];\n//       const layers = lambdaFunc.layers || [];\n//\n//       if (!cliOpts.function && layers.length === 0) {\n//         this.warn(`(skipped) function.${chalk.magenta.bold(funcName)}`);\n//         return;\n//       }\n//\n//       layers.forEach((currentLayerARN) => {\n//         if (cliOpts.function && cliOpts.function === funcName) {\n//           this.log(`function.${chalk.magenta.bold(funcName)} = layers.${this.logArn(currentLayerARN)}`);\n//           return;\n//         }\n//         this.log(`function.${chalk.magenta.bold(funcName)} = layers.${this.logArn(currentLayerARN)}`);\n//       });\n//     });\n//     console.log('\\n');\n//   }\n//\n//   log(msg, signal=' ○') {\n//     console.log('...' + `${chalk.greenBright.bold(signal)} ${chalk.white(msg)}`);\n//   }\n//\n//   logGroup(msg) {\n//     console.log('\\n');\n//     this.$sls.cli.log(`[ LayersPlugin ]: ${chalk.magenta.bold('=>')} ${chalk.greenBright.bold(msg)}`);\n//   }\n//\n//   warn(msg, signal=' ∅') {\n//     console.log('...' + chalk.yellowBright(`${chalk.yellowBright.bold(signal)} ${msg}`));\n//   }\n//\n//   error(msg, signal=' ⊗') {\n//     console.log('...' + chalk.red(`${signal} ${chalk.white.bold(msg)}`));\n//   }\n//\n//   cleanUpLayers() {\n//     return this.layersService.cleanUpLayers();\n//   }\n//\n//   logArn(arn) {\n//     let pattern = /arn:aws:lambda:([^:]+):([0-9]+):layer:([^:]+):([0-9]+)/g;\n//     let region = chalk.bold('$1');\n//     let name = chalk.magenta('$3');\n//     let formated = chalk.white(`arn:aws:lambda:${region}:*********:${name}:$4`)\n//     return arn.replace(pattern, formated);\n//   }\n// }\n"],"file":"index.js"}